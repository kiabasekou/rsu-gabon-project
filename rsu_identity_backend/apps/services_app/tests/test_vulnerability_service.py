# apps/services_app/tests/test_vulnerability_service.py
"""
üß™ RSU GABON - Tests VulnerabilityService
Tests unitaires du service de vuln√©rabilit√©
Standards: Top 1% International
"""

from decimal import Decimal
from django.test import TestCase
from apps.services_app.services import VulnerabilityService
from .fixtures import TestDataFactory


class VulnerabilityServiceTest(TestCase):
    """Tests unitaires VulnerabilityService"""
    
    def setUp(self):
        """Configuration tests"""
        self.service = VulnerabilityService()
        self.vuln_data = TestDataFactory.create_vulnerable_household()
        self.person = self.vuln_data['person']
        self.household = self.vuln_data['household']
    
    def test_calculate_assessment_success(self):
        """Test calcul assessment r√©ussi"""
        result = self.service.calculate_and_save_assessment(self.person.id)
        
        # V√©rifier que c'est bien un objet VulnerabilityAssessment
        self.assertIsNotNone(result)
        self.assertTrue(hasattr(result, 'vulnerability_score'))
        self.assertTrue(hasattr(result, 'risk_level'))
        
        # Valeurs coh√©rentes
        score = result.vulnerability_score
        self.assertIsInstance(score, Decimal)
        self.assertGreaterEqual(float(score), 0)
        self.assertLessEqual(float(score), 100)
        
        # Niveau valide
        level = result.risk_level
        valid_levels = ['CRITICAL', 'HIGH', 'MODERATE', 'LOW']
        self.assertIn(level, valid_levels)
        
        print(f"‚úÖ Assessment calcul√© - Score: {score} - Niveau: {level}")
    
    def test_bulk_calculate(self):
        """Test calcul en lot"""
        # Cr√©er 10 personnes
        person_ids = []
        for i in range(10):
            data = TestDataFactory.create_household(
                head_person=TestDataFactory.create_person(
                    first_name=f"Bulk{i}",
                    age_years=25 + i * 3
                ),
                total_monthly_income=50000 + (i * 10000)
            )
            person_ids.append(data.head_of_household.id)
        
        # Calcul bulk
        results = self.service.bulk_calculate_assessments(person_ids)
        
        # V√©rifier structure du r√©sultat
        self.assertIsNotNone(results)
        self.assertIn('success', results)
        self.assertIn('errors', results)
        self.assertIn('details', results)
        
        # V√©rifier succ√®s
        self.assertEqual(results['success'], 10)
        self.assertEqual(results['errors'], 0)
        
        print(f"‚úÖ Bulk {results['success']} calculs OK")
    
    def test_extreme_poverty_classification(self):
        """Test classification extr√™me pauvret√©"""
        # Cr√©er personne extr√™me pauvret√©
        data = TestDataFactory.create_household(
            head_person=TestDataFactory.create_person(
                first_name="Extreme",
                last_name="PAUVRE",
                age_years=40,
                has_disability=True
            ),
            total_monthly_income=30000,
            household_size=8,
            housing_type='INFORMAL',
            water_access='NONE',
            electricity_access='NONE',
            has_toilet=False
        )
        
        result = self.service.calculate_and_save_assessment(data.head_of_household.id)
        
        # V√©rifier classification
        self.assertIn(result.risk_level, ['CRITICAL', 'HIGH', 'MODERATE'])
        self.assertGreaterEqual(float(result.vulnerability_score), 40)
        
        print(f"‚úÖ Extr√™me pauvret√© - Score: {result.vulnerability_score} - Niveau: {result.risk_level}")
    
    def test_middle_class_classification(self):
        """Test classification classe moyenne"""
        data = TestDataFactory.create_middle_class_household()
        
        result = self.service.calculate_and_save_assessment(data['person'].id)
        
        # V√©rifier classification
        self.assertIn(result.risk_level, ['LOW', 'MODERATE'])
        self.assertLessEqual(float(result.vulnerability_score), 50)
        
        print(f"‚úÖ Classe moyenne - Score: {result.vulnerability_score} - Niveau: {result.risk_level}")