# Generated by Django 5.0.8 on 2025-09-25 02:48

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Household",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Créé le"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Modifié le"),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Actif")),
                (
                    "household_id",
                    models.CharField(
                        max_length=50, unique=True, verbose_name="ID Ménage"
                    ),
                ),
                (
                    "household_type",
                    models.CharField(
                        choices=[
                            ("NUCLEAR", "Nucléaire"),
                            ("EXTENDED", "Étendu"),
                            ("SINGLE_PARENT", "Monoparental"),
                            ("SINGLE_PERSON", "Personne Seule"),
                            ("COLLECTIVE", "Collectif"),
                        ],
                        default="NUCLEAR",
                        max_length=20,
                        verbose_name="Type de Ménage",
                    ),
                ),
                (
                    "household_size",
                    models.PositiveIntegerField(
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="Taille du Ménage",
                    ),
                ),
                (
                    "housing_type",
                    models.CharField(
                        choices=[
                            ("OWNED", "Propriétaire"),
                            ("RENTED", "Locataire"),
                            ("FREE", "Logé Gratuitement"),
                            ("PRECARIOUS", "Logement Précaire"),
                            ("NO_HOUSING", "Sans Logement"),
                        ],
                        max_length=20,
                        verbose_name="Type de Logement",
                    ),
                ),
                (
                    "number_of_rooms",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Nombre de Pièces"
                    ),
                ),
                (
                    "water_access",
                    models.CharField(
                        choices=[
                            ("PIPED", "Eau Courante"),
                            ("WELL", "Puits"),
                            ("BOREHOLE", "Forage"),
                            ("SPRING", "Source"),
                            ("VENDOR", "Vendeur d'Eau"),
                            ("NONE", "Pas d'Accès"),
                        ],
                        max_length=20,
                        verbose_name="Accès à l'Eau",
                    ),
                ),
                (
                    "electricity_access",
                    models.CharField(
                        choices=[
                            ("GRID", "Réseau National"),
                            ("GENERATOR", "Générateur"),
                            ("SOLAR", "Solaire"),
                            ("BATTERY", "Batterie"),
                            ("NONE", "Pas d'Électricité"),
                        ],
                        max_length=20,
                        verbose_name="Accès à l'Électricité",
                    ),
                ),
                (
                    "has_toilet",
                    models.BooleanField(default=False, verbose_name="Accès Toilettes"),
                ),
                (
                    "total_monthly_income",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        verbose_name="Revenus Totaux Mensuels (FCFA)",
                    ),
                ),
                (
                    "has_bank_account",
                    models.BooleanField(default=False, verbose_name="Compte Bancaire"),
                ),
                (
                    "assets",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Liste des biens du ménage",
                        verbose_name="Biens",
                    ),
                ),
                (
                    "has_agricultural_land",
                    models.BooleanField(default=False, verbose_name="Terre Agricole"),
                ),
                (
                    "agricultural_land_size",
                    models.FloatField(
                        blank=True,
                        null=True,
                        verbose_name="Superficie Agricole (hectares)",
                    ),
                ),
                (
                    "livestock",
                    models.JSONField(
                        blank=True, default=list, verbose_name="Bétail/Élevage"
                    ),
                ),
                (
                    "has_disabled_members",
                    models.BooleanField(
                        default=False, verbose_name="Membres en Situation de Handicap"
                    ),
                ),
                (
                    "has_elderly_members",
                    models.BooleanField(default=False, verbose_name="Personnes Âgées"),
                ),
                (
                    "has_pregnant_women",
                    models.BooleanField(default=False, verbose_name="Femmes Enceintes"),
                ),
                (
                    "has_children_under_5",
                    models.BooleanField(default=False, verbose_name="Enfants < 5 ans"),
                ),
                (
                    "latitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=6,
                        max_digits=9,
                        null=True,
                        verbose_name="Latitude",
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=6,
                        max_digits=9,
                        null=True,
                        verbose_name="Longitude",
                    ),
                ),
                (
                    "province",
                    models.CharField(
                        blank=True, max_length=50, null=True, verbose_name="Province"
                    ),
                ),
                (
                    "last_visit_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Dernière Visite"
                    ),
                ),
                (
                    "vulnerability_score",
                    models.FloatField(
                        default=0.0, verbose_name="Score de Vulnérabilité"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_%(class)s_set",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Créé par",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="updated_%(class)s_set",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Modifié par",
                    ),
                ),
            ],
            options={
                "verbose_name": "Ménage",
                "verbose_name_plural": "Ménages",
                "db_table": "rsu_households",
                "ordering": ["household_id"],
            },
        ),
        migrations.CreateModel(
            name="PersonIdentity",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Créé le"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Modifié le"),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Actif")),
                (
                    "rsu_id",
                    models.CharField(
                        help_text="Identifiant unique RSU Gabon",
                        max_length=50,
                        unique=True,
                        verbose_name="RSU ID",
                    ),
                ),
                (
                    "nip",
                    models.CharField(
                        blank=True,
                        help_text="Numéro d'Identification Personnel (RBPP)",
                        max_length=13,
                        null=True,
                        unique=True,
                        verbose_name="NIP",
                    ),
                ),
                (
                    "national_id",
                    models.CharField(
                        blank=True,
                        help_text="Carte Nationale d'Identité ou Passeport",
                        max_length=50,
                        null=True,
                        verbose_name="CNI/Passeport",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(max_length=100, verbose_name="Prénom(s)"),
                ),
                (
                    "last_name",
                    models.CharField(max_length=100, verbose_name="Nom de famille"),
                ),
                (
                    "maiden_name",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Nom de jeune fille",
                    ),
                ),
                ("birth_date", models.DateField(verbose_name="Date de naissance")),
                (
                    "birth_place",
                    models.CharField(
                        blank=True,
                        max_length=200,
                        null=True,
                        verbose_name="Lieu de naissance",
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        choices=[
                            ("M", "Masculin"),
                            ("F", "Féminin"),
                            ("O", "Autre/Non spécifié"),
                        ],
                        max_length=1,
                        verbose_name="Genre",
                    ),
                ),
                (
                    "marital_status",
                    models.CharField(
                        choices=[
                            ("SINGLE", "Célibataire"),
                            ("MARRIED", "Marié(e)"),
                            ("DIVORCED", "Divorcé(e)"),
                            ("WIDOW", "Veuf/Veuve"),
                            ("COHABITING", "Concubinage"),
                            ("SEPARATED", "Séparé(e)"),
                        ],
                        default="SINGLE",
                        max_length=20,
                        verbose_name="Statut matrimonial",
                    ),
                ),
                (
                    "nationality",
                    models.CharField(
                        default="Gabonaise", max_length=50, verbose_name="Nationalité"
                    ),
                ),
                (
                    "education_level",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("NONE", "Aucune"),
                            ("INCOMPLETE_PRIMARY", "Primaire Incomplet"),
                            ("PRIMARY", "Primaire"),
                            ("SECONDARY", "Secondaire"),
                            ("HIGH_SCHOOL", "Baccalauréat"),
                            ("TECHNICAL", "Formation Technique"),
                            ("UNIVERSITY", "Universitaire"),
                            ("POSTGRADUATE", "Post-universitaire"),
                        ],
                        max_length=30,
                        null=True,
                        verbose_name="Niveau d'éducation",
                    ),
                ),
                (
                    "occupation",
                    models.CharField(
                        blank=True, max_length=200, null=True, verbose_name="Profession"
                    ),
                ),
                (
                    "employer",
                    models.CharField(
                        blank=True, max_length=200, null=True, verbose_name="Employeur"
                    ),
                ),
                (
                    "monthly_income",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        verbose_name="Revenus mensuels (FCFA)",
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True,
                        max_length=13,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Format requis: +241XXXXXXXX",
                                regex="^\\+241[0-9]{8}$",
                            )
                        ],
                        verbose_name="Téléphone principal",
                    ),
                ),
                (
                    "phone_number_alt",
                    models.CharField(
                        blank=True,
                        max_length=13,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Format requis: +241XXXXXXXX",
                                regex="^\\+241[0-9]{8}$",
                            )
                        ],
                        verbose_name="Téléphone alternatif",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, null=True, verbose_name="Email"
                    ),
                ),
                (
                    "latitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=6,
                        max_digits=9,
                        null=True,
                        verbose_name="Latitude GPS",
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=6,
                        max_digits=9,
                        null=True,
                        verbose_name="Longitude GPS",
                    ),
                ),
                (
                    "gps_accuracy",
                    models.FloatField(
                        blank=True, null=True, verbose_name="Précision GPS (mètres)"
                    ),
                ),
                (
                    "province",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("ESTUAIRE", "Estuaire"),
                            ("HAUT_OGOOUE", "Haut-Ogooué"),
                            ("MOYEN_OGOOUE", "Moyen-Ogooué"),
                            ("NGOUNIE", "Ngounié"),
                            ("NYANGA", "Nyanga"),
                            ("OGOOUE_IVINDO", "Ogooué-Ivindo"),
                            ("OGOOUE_LOLO", "Ogooué-Lolo"),
                            ("OGOOUE_MARITIME", "Ogooué-Maritime"),
                            ("WOLEU_NTEM", "Woleu-Ntem"),
                        ],
                        max_length=50,
                        null=True,
                        verbose_name="Province",
                    ),
                ),
                (
                    "department",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Département",
                    ),
                ),
                (
                    "commune",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="Commune"
                    ),
                ),
                (
                    "district",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="District/Quartier",
                    ),
                ),
                (
                    "address",
                    models.TextField(
                        blank=True, null=True, verbose_name="Adresse complète"
                    ),
                ),
                (
                    "has_disability",
                    models.BooleanField(
                        default=False, verbose_name="Situation de handicap"
                    ),
                ),
                (
                    "disability_details",
                    models.TextField(
                        blank=True, null=True, verbose_name="Détails handicap"
                    ),
                ),
                (
                    "chronic_diseases",
                    models.JSONField(
                        blank=True, default=list, verbose_name="Maladies chroniques"
                    ),
                ),
                (
                    "is_household_head",
                    models.BooleanField(default=False, verbose_name="Chef de ménage"),
                ),
                (
                    "verification_status",
                    models.CharField(
                        choices=[
                            ("PENDING", "En Attente"),
                            ("VERIFIED", "Vérifié"),
                            ("REJECTED", "Rejeté"),
                            ("REQUIRES_REVIEW", "Nécessite Révision"),
                        ],
                        default="PENDING",
                        max_length=20,
                        verbose_name="Statut de vérification",
                    ),
                ),
                (
                    "verified_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Vérifié le"
                    ),
                ),
                (
                    "rbpp_synchronized",
                    models.BooleanField(default=False, verbose_name="Synchronisé RBPP"),
                ),
                (
                    "rbpp_last_sync",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Dernière sync RBPP"
                    ),
                ),
                (
                    "rbpp_sync_errors",
                    models.JSONField(
                        blank=True, default=list, verbose_name="Erreurs sync RBPP"
                    ),
                ),
                (
                    "data_completeness_score",
                    models.FloatField(
                        default=0.0, verbose_name="Score complétude données"
                    ),
                ),
                (
                    "last_survey_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Dernière enquête"
                    ),
                ),
                (
                    "notes",
                    models.TextField(blank=True, null=True, verbose_name="Notes"),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_%(class)s_set",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Créé par",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="updated_%(class)s_set",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Modifié par",
                    ),
                ),
                (
                    "verified_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="verified_persons",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Vérifié par",
                    ),
                ),
            ],
            options={
                "verbose_name": "Identité Personne",
                "verbose_name_plural": "Identités Personnes",
                "db_table": "rsu_persons",
                "ordering": ["last_name", "first_name"],
            },
        ),
        migrations.CreateModel(
            name="HouseholdMember",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Créé le"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Modifié le"),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Actif")),
                (
                    "relationship_to_head",
                    models.CharField(
                        choices=[
                            ("HEAD", "Chef de Ménage"),
                            ("SPOUSE", "Époux/Épouse"),
                            ("CHILD", "Enfant"),
                            ("PARENT", "Parent"),
                            ("SIBLING", "Frère/Sœur"),
                            ("GRANDPARENT", "Grand-Parent"),
                            ("GRANDCHILD", "Petit-Enfant"),
                            ("UNCLE_AUNT", "Oncle/Tante"),
                            ("COUSIN", "Cousin/Cousine"),
                            ("NEPHEW_NIECE", "Neveu/Nièce"),
                            ("IN_LAW", "Beau-parent/Belle-famille"),
                            ("ADOPTED", "Adopté(e)"),
                            ("FOSTER", "Enfant Accueilli"),
                            ("DOMESTIC_WORKER", "Employé(e) Domestique"),
                            ("LODGER", "Locataire/Pensionnaire"),
                            ("OTHER", "Autre"),
                        ],
                        max_length=20,
                        verbose_name="Relation au Chef de Ménage",
                    ),
                ),
                (
                    "joined_household_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        verbose_name="Date d'Entrée dans le Ménage",
                    ),
                ),
                (
                    "left_household_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Date de Sortie du Ménage"
                    ),
                ),
                (
                    "is_current_member",
                    models.BooleanField(default=True, verbose_name="Membre Actuel"),
                ),
                (
                    "contributes_to_income",
                    models.BooleanField(
                        default=False, verbose_name="Contribue aux Revenus"
                    ),
                ),
                (
                    "monthly_contribution",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="Contribution Mensuelle (FCFA)",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_%(class)s_set",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Créé par",
                    ),
                ),
                (
                    "household",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="members",
                        to="identity_app.household",
                        verbose_name="Ménage",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="updated_%(class)s_set",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Modifié par",
                    ),
                ),
                (
                    "person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="household_memberships",
                        to="identity_app.personidentity",
                        verbose_name="Personne",
                    ),
                ),
            ],
            options={
                "verbose_name": "Membre de Ménage",
                "verbose_name_plural": "Membres de Ménage",
                "db_table": "rsu_household_members",
                "ordering": ["household", "relationship_to_head"],
            },
        ),
        migrations.AddField(
            model_name="household",
            name="head_of_household",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="headed_household",
                to="identity_app.personidentity",
                verbose_name="Chef de Ménage",
            ),
        ),
        migrations.CreateModel(
            name="RBPPSync",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Créé le"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Modifié le"),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Actif")),
                (
                    "sync_type",
                    models.CharField(
                        choices=[
                            ("VALIDATION", "Validation NIP"),
                            ("DATA_FETCH", "Récupération Données"),
                            ("UPDATE", "Mise à Jour"),
                            ("VERIFICATION", "Vérification Biométrique"),
                            ("BULK_SYNC", "Synchronisation Massive"),
                        ],
                        max_length=20,
                        verbose_name="Type de Sync",
                    ),
                ),
                (
                    "sync_status",
                    models.CharField(
                        choices=[
                            ("PENDING", "En Attente"),
                            ("IN_PROGRESS", "En Cours"),
                            ("SUCCESS", "Réussie"),
                            ("FAILED", "Échouée"),
                            ("TIMEOUT", "Délai Dépassé"),
                            ("PARTIAL", "Partielle"),
                        ],
                        default="PENDING",
                        max_length=20,
                        verbose_name="Statut",
                    ),
                ),
                (
                    "rbpp_request_id",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="ID Requête RBPP",
                    ),
                ),
                (
                    "nip_requested",
                    models.CharField(
                        blank=True, max_length=13, null=True, verbose_name="NIP Demandé"
                    ),
                ),
                (
                    "nip_returned",
                    models.CharField(
                        blank=True,
                        max_length=13,
                        null=True,
                        verbose_name="NIP Retourné",
                    ),
                ),
                (
                    "rbpp_response_data",
                    models.JSONField(
                        blank=True, null=True, verbose_name="Données Réponse RBPP"
                    ),
                ),
                (
                    "biometric_match_score",
                    models.FloatField(
                        blank=True,
                        null=True,
                        verbose_name="Score Correspondance Biométrique",
                    ),
                ),
                (
                    "data_discrepancies",
                    models.JSONField(
                        blank=True, default=list, verbose_name="Incohérences Données"
                    ),
                ),
                (
                    "error_code",
                    models.CharField(
                        blank=True, max_length=20, null=True, verbose_name="Code Erreur"
                    ),
                ),
                (
                    "error_message",
                    models.TextField(
                        blank=True, null=True, verbose_name="Message Erreur"
                    ),
                ),
                (
                    "started_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Démarré à"
                    ),
                ),
                (
                    "completed_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Terminé à"
                    ),
                ),
                (
                    "duration_seconds",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Durée (secondes)"
                    ),
                ),
                (
                    "retry_count",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Nombre de Tentatives"
                    ),
                ),
                (
                    "max_retries",
                    models.PositiveIntegerField(
                        default=3, verbose_name="Max Tentatives"
                    ),
                ),
                (
                    "next_retry_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Prochaine Tentative"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_%(class)s_set",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Créé par",
                    ),
                ),
                (
                    "person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="rbpp_syncs",
                        to="identity_app.personidentity",
                        verbose_name="Personne",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="updated_%(class)s_set",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Modifié par",
                    ),
                ),
            ],
            options={
                "verbose_name": "Synchronisation RBPP",
                "verbose_name_plural": "Synchronisations RBPP",
                "db_table": "rsu_rbpp_syncs",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="GeographicData",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Créé le"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Modifié le"),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Actif")),
                (
                    "location_name",
                    models.CharField(max_length=200, verbose_name="Nom de la Localité"),
                ),
                ("province", models.CharField(max_length=50, verbose_name="Province")),
                (
                    "department",
                    models.CharField(max_length=100, verbose_name="Département"),
                ),
                ("commune", models.CharField(max_length=100, verbose_name="Commune")),
                (
                    "center_latitude",
                    models.DecimalField(
                        decimal_places=6, max_digits=9, verbose_name="Latitude Centre"
                    ),
                ),
                (
                    "center_longitude",
                    models.DecimalField(
                        decimal_places=6, max_digits=9, verbose_name="Longitude Centre"
                    ),
                ),
                (
                    "zone_type",
                    models.CharField(
                        choices=[
                            ("URBAN_CENTER", "Centre Urbain"),
                            ("URBAN_PERIPHERY", "Périphérie Urbaine"),
                            ("RURAL_ACCESSIBLE", "Rural Accessible"),
                            ("RURAL_REMOTE", "Rural Isolé"),
                            ("COASTAL", "Zone Côtière"),
                            ("FOREST", "Zone Forestière"),
                            ("MINING", "Zone Minière"),
                            ("BORDER", "Zone Frontalière"),
                        ],
                        max_length=20,
                        verbose_name="Type de Zone",
                    ),
                ),
                (
                    "population_estimate",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Population Estimée"
                    ),
                ),
                (
                    "area_km2",
                    models.FloatField(
                        blank=True, null=True, verbose_name="Superficie (km²)"
                    ),
                ),
                (
                    "road_condition",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("PAVED", "Route Goudronnée"),
                            ("GRAVEL", "Route en Gravier"),
                            ("DIRT", "Piste en Terre"),
                            ("SEASONAL", "Praticable en Saison Sèche"),
                            ("IMPASSABLE", "Impraticable"),
                        ],
                        max_length=20,
                        null=True,
                        verbose_name="État des Routes",
                    ),
                ),
                (
                    "distance_to_main_road_km",
                    models.FloatField(
                        blank=True,
                        null=True,
                        verbose_name="Distance Route Principale (km)",
                    ),
                ),
                (
                    "public_transport_available",
                    models.BooleanField(
                        default=False, verbose_name="Transport Public Disponible"
                    ),
                ),
                (
                    "distance_to_health_center_km",
                    models.FloatField(
                        blank=True,
                        null=True,
                        verbose_name="Distance Centre de Santé (km)",
                    ),
                ),
                (
                    "distance_to_hospital_km",
                    models.FloatField(
                        blank=True, null=True, verbose_name="Distance Hôpital (km)"
                    ),
                ),
                (
                    "distance_to_school_km",
                    models.FloatField(
                        blank=True, null=True, verbose_name="Distance École (km)"
                    ),
                ),
                (
                    "distance_to_secondary_school_km",
                    models.FloatField(
                        blank=True,
                        null=True,
                        verbose_name="Distance Collège/Lycée (km)",
                    ),
                ),
                (
                    "distance_to_market_km",
                    models.FloatField(
                        blank=True, null=True, verbose_name="Distance Marché (km)"
                    ),
                ),
                (
                    "distance_to_bank_km",
                    models.FloatField(
                        blank=True, null=True, verbose_name="Distance Banque (km)"
                    ),
                ),
                (
                    "distance_to_admin_center_km",
                    models.FloatField(
                        blank=True,
                        null=True,
                        verbose_name="Distance Centre Administratif (km)",
                    ),
                ),
                (
                    "mobile_network_coverage",
                    models.BooleanField(
                        default=False, verbose_name="Couverture Réseau Mobile"
                    ),
                ),
                (
                    "internet_available",
                    models.BooleanField(
                        default=False, verbose_name="Internet Disponible"
                    ),
                ),
                (
                    "flood_risk",
                    models.BooleanField(
                        default=False, verbose_name="Risque d'Inondation"
                    ),
                ),
                (
                    "difficult_access_rainy_season",
                    models.BooleanField(
                        default=False, verbose_name="Accès Difficile Saison Pluies"
                    ),
                ),
                (
                    "security_concerns",
                    models.BooleanField(
                        default=False, verbose_name="Préoccupations Sécuritaires"
                    ),
                ),
                (
                    "accessibility_score",
                    models.FloatField(
                        default=0.0, verbose_name="Score d'Accessibilité"
                    ),
                ),
                (
                    "service_availability_score",
                    models.FloatField(
                        default=0.0, verbose_name="Score Disponibilité Services"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_%(class)s_set",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Créé par",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="updated_%(class)s_set",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Modifié par",
                    ),
                ),
            ],
            options={
                "verbose_name": "Données Géographiques",
                "verbose_name_plural": "Données Géographiques",
                "db_table": "rsu_geographic_data",
                "ordering": ["province", "location_name"],
                "unique_together": {("location_name", "province", "commune")},
            },
        ),
        migrations.AddIndex(
            model_name="personidentity",
            index=models.Index(fields=["rsu_id"], name="rsu_persons_rsu_id_630a71_idx"),
        ),
        migrations.AddIndex(
            model_name="personidentity",
            index=models.Index(fields=["nip"], name="rsu_persons_nip_3b7a6e_idx"),
        ),
        migrations.AddIndex(
            model_name="personidentity",
            index=models.Index(
                fields=["province", "commune"], name="rsu_persons_provinc_b5c7b7_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="personidentity",
            index=models.Index(
                fields=["verification_status"], name="rsu_persons_verific_156322_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="personidentity",
            index=models.Index(
                fields=["birth_date"], name="rsu_persons_birth_d_a49faf_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="householdmember",
            unique_together={("household", "person")},
        ),
        migrations.AddIndex(
            model_name="rbppsync",
            index=models.Index(
                fields=["person", "sync_type"], name="rsu_rbpp_sy_person__38157d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="rbppsync",
            index=models.Index(
                fields=["sync_status"], name="rsu_rbpp_sy_sync_st_f6b8bb_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="rbppsync",
            index=models.Index(
                fields=["next_retry_at"], name="rsu_rbpp_sy_next_re_4a8198_idx"
            ),
        ),
    ]
