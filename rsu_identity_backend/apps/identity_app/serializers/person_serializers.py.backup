# =============================================================================
# FICHIER: apps/identity_app/serializers/person_serializers.py
# CORRECTION MINIMALE: Ajouter SEULEMENT les validations manquantes
# PR√âSERVATION: Architecture et serializers existants intacts
# =============================================================================

"""
üá¨üá¶ RSU Gabon - Person Serializers
S√©rialisation des identit√©s personnelles
"""
from rest_framework import serializers
from django.utils import timezone
from decimal import Decimal
from datetime import date
from apps.identity_app.models import PersonIdentity
from apps.core_app.serializers import BaseModelSerializer, RSUUserMinimalSerializer
from utils.gabonese_data import PROVINCES, validate_gabon_phone, validate_gabon_coordinates

class PersonIdentitySerializer(BaseModelSerializer):
    """
    Serializer principal pour PersonIdentity
    Vue compl√®te avec calculs automatiques
    """
    age = serializers.IntegerField(source='age', read_only=True)
    full_name = serializers.CharField(read_only=True)
    province_info = serializers.SerializerMethodField()
    vulnerability_status = serializers.SerializerMethodField()
    data_completeness_percentage = serializers.DecimalField(
        source='data_completeness_score', max_digits=5, decimal_places=2, read_only=True
    )
    
    # Relations
    verified_by_details = RSUUserMinimalSerializer(source='verified_by', read_only=True)
    
    class Meta:
        model = PersonIdentity
        fields = [
            # Identifiants
            'rsu_id', 'nip', 'national_id',
            
            # Informations personnelles
            'first_name', 'last_name', 'maiden_name', 'full_name',
            'birth_date', 'birth_place', 'age', 'gender', 'nationality',
            'marital_status', 'education_level', 'occupation', 'employer',
            'monthly_income',
            
            # Contact et localisation
            'phone_number', 'phone_number_alt', 'email',
            'latitude', 'longitude', 'gps_accuracy',
            'province', 'department', 'commune', 'district', 'address',
            
            # Sant√© et vuln√©rabilit√©
            'has_disability', 'disability_details', 'chronic_diseases',
            
            # Statut et m√©tadonn√©es
            'verification_status', 'verified_at', 'verified_by_details',
            'data_completeness_percentage', 'vulnerability_status',
            'rbpp_synchronized', 'rbpp_sync_date',
            'is_household_head', 'notes',
            
            # Informations suppl√©mentaires
            'province_info',
            
            # Audit
            'created_at', 'updated_at', 'created_by', 'updated_by'
        ]
        read_only_fields = [
            'rsu_id', 'age', 'full_name', 'verification_status', 
            'verified_at', 'data_completeness_percentage', 'rbpp_synchronized',
            'created_at', 'updated_at'
        ]
    
    def get_province_info(self, obj):
        """Informations d√©taill√©es sur la province"""
        return PROVINCES.get(obj.province, {})
    
    def get_vulnerability_status(self, obj):
        """Calcul du statut de vuln√©rabilit√© contextualis√©"""
        age = obj.age
        indicators = []
        
        if age is not None:
            if age < 5:
                indicators.append('ENFANT_JEUNE')
            elif age > 65:
                indicators.append('PERSONNE_AGEE')
        
        if obj.monthly_income and obj.monthly_income < 150000:  # Seuil pauvret√© FCFA
            indicators.append('PAUVRETE')
        
        if obj.province in ['NYANGA', 'OGOOUE_IVINDO', 'OGOOUE_LOLO']:
            indicators.append('ZONE_ISOLEE')
            
        if not indicators:
            return {'status': 'NON_VULNERABLE', 'indicators': []}
        
        return {
            'status': 'VULNERABLE',
            'indicators': indicators,
            'risk_level': 'HIGH' if len(indicators) >= 3 else 'MEDIUM'
        }

class PersonIdentityCreateSerializer(serializers.ModelSerializer):
    """
    Serializer pour cr√©ation d'identit√©
    Champs essentiels uniquement pour enqu√™tes terrain
    ‚úÖ CORRECTION: Validations renforc√©es ajout√©es
    """
    
    class Meta:
        model = PersonIdentity
        fields = [
            # Essentiels
            'first_name', 'last_name', 'birth_date', 'gender',
            'phone_number', 'province', 'address',
            
            # Optionnels cr√©ation rapide
            'maiden_name', 'birth_place', 'marital_status',
            'education_level', 'occupation', 'monthly_income',
            'latitude', 'longitude', 'gps_accuracy',
            'department', 'commune', 'district',
            'has_disability', 'disability_details',
            'is_household_head', 'email', 'notes'
        ]
        extra_kwargs = {
            'first_name': {'required': True},
            'last_name': {'required': True},
            'birth_date': {'required': True},
            'gender': {'required': True},
        }

    # ‚úÖ AJOUT: Validation stricte date naissance
    def validate_birth_date(self, value):
        """Validation stricte date naissance - CORRECTION du test qui √©choue"""
        if not value:
            raise serializers.ValidationError("La date de naissance est obligatoire.")
        
        today = date.today()
        
        # ‚ùå Refuser dates futures
        if value > today:
            raise serializers.ValidationError(
                "La date de naissance ne peut pas √™tre dans le futur."
            )
        
        # ‚ùå Refuser √¢ges irr√©alistes
        age = today.year - value.year - ((today.month, today.day) < (value.month, value.day))
        if age > 120:
            raise serializers.ValidationError("√Çge trop √©lev√© (plus de 120 ans).")
        if age < 0:
            raise serializers.ValidationError("Date de naissance invalide.")
            
        return value

    # ‚úÖ AJOUT: Validation t√©l√©phone gabonais
    def validate_phone_number(self, value):
        """Validation num√©ro t√©l√©phone gabonais"""
        if value and not validate_gabon_phone(value):
            raise serializers.ValidationError(
                "Num√©ro de t√©l√©phone gabonais invalide. Format: +241XXXXXXXX"
            )
        return value

    # ‚úÖ AJOUT: Validation province
    def validate_province(self, value):
        """Validation province gabonaise"""
        if value not in PROVINCES:
            valid_provinces = list(PROVINCES.keys())
            raise serializers.ValidationError(
                f"Province invalide. Provinces valides: {valid_provinces}"
            )
        return value

    # ‚úÖ AJOUT: Validation crois√©e GPS - CORRECTION du test qui √©choue
    def validate(self, attrs):
        """Validation crois√©e coordonn√©es GPS Gabon"""
        latitude = attrs.get('latitude')
        longitude = attrs.get('longitude')
        
        # Si coordonn√©es fournies, valider qu'elles sont au Gabon
        if latitude is not None and longitude is not None:
            try:
                lat_float = float(latitude)
                lng_float = float(longitude)
                
                if not validate_gabon_coordinates(lat_float, lng_float):
                    raise serializers.ValidationError({
                        'non_field_errors': [
                            "Les coordonn√©es GPS ne correspondent pas au territoire gabonais. "
                            "V√©rifiez latitude (-4.0¬∞ √† 2.3¬∞) et longitude (8.5¬∞ √† 14.5¬∞)."
                        ]
                    })
            except (ValueError, TypeError):
                raise serializers.ValidationError({
                    'non_field_errors': ["Format de coordonn√©es GPS invalide."]
                })
        
        return attrs
    
    def create(self, validated_data):
        """Cr√©ation avec g√©n√©ration automatique RSU-ID"""
        # G√©n√©rer RSU-ID automatiquement dans le mod√®le
        person = PersonIdentity.objects.create(**validated_data)
        
        # Calculer score compl√©tude initial
        person.calculate_completeness_score()
        person.save(update_fields=['data_completeness_score'])
        
        return person

class PersonIdentityUpdateSerializer(serializers.ModelSerializer):
    """
    Serializer pour mise √† jour partielle
    Tous les champs modifiables sauf identifiants
    ‚úÖ PR√âSERV√â: Architecture existante intacte
    """
    
    class Meta:
        model = PersonIdentity
        fields = [
            # Informations modifiables
            'first_name', 'last_name', 'maiden_name',
            'birth_place', 'marital_status', 'nationality',
            'education_level', 'occupation', 'employer', 'monthly_income',
            'phone_number', 'phone_number_alt', 'email',
            'latitude', 'longitude', 'gps_accuracy',
            'province', 'department', 'commune', 'district', 'address',
            'has_disability', 'disability_details', 'chronic_diseases',
            'is_household_head', 'notes'
        ]

    # ‚úÖ AJOUT: M√™mes validations que CreateSerializer pour coh√©rence
    def validate_birth_date(self, value):
        """Validation date naissance"""
        if value and value > date.today():
            raise serializers.ValidationError(
                "La date de naissance ne peut pas √™tre dans le futur."
            )
        return value

    def validate_phone_number(self, value):
        """Validation t√©l√©phone gabonais"""
        if value and not validate_gabon_phone(value):
            raise serializers.ValidationError(
                "Num√©ro de t√©l√©phone gabonais invalide. Format: +241XXXXXXXX"
            )
        return value

    def validate_province(self, value):
        """Validation province gabonaise"""
        if value and value not in PROVINCES:
            valid_provinces = list(PROVINCES.keys())
            raise serializers.ValidationError(
                f"Province invalide. Provinces valides: {valid_provinces}"
            )
        return value
    
    def update(self, instance, validated_data):
        """Mise √† jour avec recalcul scores"""
        instance = super().update(instance, validated_data)
        instance.calculate_completeness_score()
        instance.save(update_fields=['data_completeness_score'])
        return instance

class PersonIdentityMinimalSerializer(serializers.ModelSerializer):
    """
    Serializer minimal pour listes et r√©f√©rences
    ‚úÖ PR√âSERV√â: Unchanged from original
    """
    full_name = serializers.CharField(source='full_name', read_only=True)
    age = serializers.IntegerField(source='age', read_only=True)
    
    class Meta:
        model = PersonIdentity
        fields = [
            'rsu_id', 'full_name', 'age', 'gender', 
            'province', 'verification_status'
        ]
        read_only_fields = '__all__'

class PersonIdentitySearchSerializer(serializers.ModelSerializer):
    """
    Serializer pour recherche et d√©duplication
    Champs cl√©s pour identification
    ‚úÖ PR√âSERV√â: Architecture existante intacte
    """
    full_name = serializers.CharField(source='full_name', read_only=True)
    age = serializers.IntegerField(source='age', read_only=True)
    similarity_score = serializers.FloatField(read_only=True)  # Ajout√© dynamiquement
    
    class Meta:
        model = PersonIdentity
        fields = [
            'rsu_id', 'full_name', 'birth_date', 'age', 'gender',
            'phone_number', 'province', 'commune', 
            'verification_status', 'similarity_score'
        ]
        read_only_fields = '__all__'