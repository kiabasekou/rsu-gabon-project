"""
üá¨üá¶ RSU Gabon - Service Scoring Vuln√©rabilit√©
Standards Top 1% - Intelligence Artificielle Contextuelle
"""
from .base_service import BaseService
from typing import Dict, Tuple
import logging

logger = logging.getLogger(__name__)

class VulnerabilityScoringService(BaseService):
    """
    Service de calcul du score de vuln√©rabilit√©
    Adapt√© au contexte socio-√©conomique gabonais
    """
    
    # Seuils de pauvret√© Gabon (FCFA)
    EXTREME_POVERTY_THRESHOLD = 75000
    POVERTY_THRESHOLD = 150000
    MIDDLE_CLASS_THRESHOLD = 500000
    
    def calculate_vulnerability_score(self, person_data: Dict) -> Dict:
        """
        Calcul du score de vuln√©rabilit√© multi-dimensionnel
        
        Args:
            person_data: Donn√©es de la personne
            
        Returns:
            Dict avec scores par dimension et score global
        """
        scores = {
            'demographic': self._calculate_demographic_score(person_data),
            'economic': self._calculate_economic_score(person_data),
            'social': self._calculate_social_score(person_data),
            'health': self._calculate_health_score(person_data),
            'geographic': self._calculate_geographic_score(person_data),
        }
        
        # Score global pond√©r√©
        global_score = self._calculate_weighted_score(scores)
        
        return {
            'scores_by_dimension': scores,
            'global_score': global_score,
            'vulnerability_level': self._determine_vulnerability_level(global_score),
            'priority_factors': self._identify_priority_factors(scores)
        }
    
    def _calculate_demographic_score(self, data: Dict) -> float:
        """Score d√©mographique (0-100)"""
        score = 0
        
        # √Çge vuln√©rable
        age = data.get('age', 0)
        if age < 5 or age > 65:
            score += 25
        elif age < 18:
            score += 15
            
        # Genre et responsabilit√© familiale
        if data.get('gender') == 'F' and data.get('is_household_head'):
            score += 20  # Femme chef de m√©nage
            
        # Taille du m√©nage (m√©nages √©tendus au Gabon)
        household_size = data.get('household_size', 1)
        if household_size > 8:
            score += 15
        elif household_size > 5:
            score += 10
            
        # Statut marital
        if data.get('marital_status') == 'WIDOW':
            score += 15
            
        return min(score, 100)
    
    def _calculate_economic_score(self, data: Dict) -> float:
        """Score √©conomique bas√© sur revenus et emploi"""
        score = 0
        monthly_income = data.get('monthly_income', 0)
        
        # Revenus
        if monthly_income < self.EXTREME_POVERTY_THRESHOLD:
            score += 50
        elif monthly_income < self.POVERTY_THRESHOLD:
            score += 35
        elif monthly_income < self.MIDDLE_CLASS_THRESHOLD:
            score += 20
            
        # Type d'emploi
        occupation = data.get('occupation', '')
        if occupation in ['UNEMPLOYED', 'INFORMAL']:
            score += 25
        elif occupation in ['FARMER', 'FISHERMAN']:
            score += 20
            
        # Type de logement
        housing_type = data.get('housing_type', '')
        if housing_type in ['PRECARIOUS', 'NO_HOUSING']:
            score += 25
            
        return min(score, 100)
    
    def _calculate_social_score(self, data: Dict) -> float:
        """Score social - √©ducation, isolement, handicap"""
        score = 0
        
        # Niveau d'√©ducation
        education = data.get('education_level', '')
        if education == 'NONE':
            score += 30
        elif education in ['PRIMARY', 'INCOMPLETE_PRIMARY']:
            score += 20
        elif education == 'SECONDARY':
            score += 10
            
        # Handicap
        if data.get('has_disability'):
            score += 25
            
        # Isolement social
        if data.get('social_isolation_indicators', 0) > 2:
            score += 20
            
        return min(score, 100)
    
    def _calculate_health_score(self, data: Dict) -> float:
        """Score sant√©"""
        score = 0
        
        # Maladies chroniques
        if data.get('chronic_diseases', []):
            score += 25
            
        # Malnutrition
        if data.get('malnutrition_indicators'):
            score += 30
            
        # Acc√®s aux soins
        distance_to_health_center = data.get('distance_to_health_center_km', 0)
        if distance_to_health_center > 50:
            score += 25
        elif distance_to_health_center > 20:
            score += 15
            
        return min(score, 100)
    
    def _calculate_geographic_score(self, data: Dict) -> float:
        """Score g√©ographique - accessibilit√© services"""
        score = 0
        
        # Type de zone
        zone_type = data.get('geographic_zone', '')
        if zone_type == 'RURAL_REMOTE':
            score += 40
        elif zone_type in ['RURAL_ACCESSIBLE', 'FOREST']:
            score += 25
        elif zone_type == 'URBAN_PERIPHERY':
            score += 15
            
        # Province (certaines plus isol√©es)
        province = data.get('province', '')
        if province in ['OGOOUE_IVINDO', 'OGOOUE_LOLO', 'NYANGA']:
            score += 20
            
        # Accessibilit√© transport
        if data.get('difficult_access_transport'):
            score += 15
            
        return min(score, 100)
    
    def _calculate_weighted_score(self, scores: Dict) -> float:
        """Calcul du score global pond√©r√©"""
        weights = {
            'economic': 0.3,
            'social': 0.25, 
            'demographic': 0.2,
            'health': 0.15,
            'geographic': 0.1
        }
        
        weighted_score = sum(
            scores[dimension] * weight 
            for dimension, weight in weights.items()
        )
        
        return round(weighted_score, 2)
    
    def _determine_vulnerability_level(self, score: float) -> str:
        """D√©termine le niveau de vuln√©rabilit√©"""
        if score >= 75:
            return 'CRITICAL'
        elif score >= 50:
            return 'HIGH'
        elif score >= 25:
            return 'MODERATE'
        else:
            return 'LOW'
    
    def _identify_priority_factors(self, scores: Dict) -> list:
        """Identifie les facteurs prioritaires d'intervention"""
        factors = []
        
        for dimension, score in scores.items():
            if score >= 50:
                factors.append(dimension)
                
        return factors
